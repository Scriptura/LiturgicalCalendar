namespace LiturgicalCalendar

// - Optimisation O(n) ‚Üí O(1) avec pr√©-calcul d'index

open System

/// Type alias pour les identifiants de c√©l√©brations
type CelebrationId = string

/// Type alias pour les cl√©s de date au format "MMDD"
type DateKey = string

/// Type repr√©sentant une entr√©e dans l'index : (ID, c√©l√©bration)
type IndexedCelebration = CelebrationId * LiturgicalCelebration

module DateIndex =

    /// Construit un index permettant de rechercher rapidement les c√©l√©brations par date.
    /// Cette fonction illustre un pattern fondamental : sacrifier de la m√©moire
    /// et du temps de calcul initial pour gagner √©norm√©ment en vitesse de recherche.
    ///
    /// üèóÔ∏è STRAT√âGIE :
    /// 1. Parcourir une fois toutes les c√©l√©brations (co√ªt O(n))
    /// 2. Cr√©er un Map o√π les cl√©s sont des dates "MMDD"
    /// 3. Les valeurs sont des listes de c√©l√©brations pour cette date
    /// 4. Les recherches futures seront O(1) au lieu de O(n)
    ///
    /// üìä COMPLEXIT√â :
    /// - Construction : O(n) o√π n = nombre de c√©l√©brations
    /// - Recherche apr√®s construction : O(1)
    /// - M√©moire : ~2x l'espace original (acceptable pour les gains de vitesse)
    ///
    /// üìù PARAM√àTRES :
    /// - calendar : Map<CelebrationId, LiturgicalCelebration> - Le calendrier source
    ///
    /// üìù RETOUR :
    /// - Map<DateKey, IndexedCelebration list> - Index optimis√© pour recherche par date
    ///
    /// üí° EXEMPLE D'USAGE :
    /// let index = buildDateIndex myCalendar
    /// let celebrationsOn5Feb = index.TryFind("0205") |> Option.defaultValue []
    let buildDateIndex (calendar: Map<CelebrationId, LiturgicalCelebration>) : Map<DateKey, IndexedCelebration list> =

        // ================================================================
        // √âTAPE 1 : CONVERSION EN S√âQUENCE POUR LE PIPELINE
        // ================================================================
        // Map.toSeq convertit Map<K,V> en seq<K * V>
        // C'est le point d'entr√©e de notre pipeline fonctionnel
        calendar
        |> Map.toSeq

        // ================================================================
        // √âTAPE 2 : TRANSFORMATION DES C√âL√âBRATIONS EN ENTR√âES D'INDEX
        // ================================================================
        // Contrairement √† la version pr√©c√©dente, toutes les c√©l√©brations
        // ont des dates fixes (Month et Day sont des int, pas des Option)
        // Cela simplifie consid√©rablement le pipeline
        |> Seq.map (fun (celebrationId, celebration) ->

            // Construction de la cl√© de date standardis√©e
            // Format "MMDD" : 5 f√©vrier ‚Üí "0205", 25 d√©cembre ‚Üí "1225"
            // sprintf "%02d%02d" garantit 2 chiffres avec z√©ro devant si n√©cessaire
            let dateKey = sprintf "%02d%02d" celebration.Month celebration.Day

            // Cr√©ation du tuple de r√©sultat
            // Structure : (cl√©_date, (id_c√©l√©bration, objet_c√©l√©bration))
            // Ce format facilite le regroupement suivant
            (dateKey, (celebrationId, celebration)))

        // ================================================================
        // √âTAPE 3 : REGROUPEMENT PAR DATE
        // ================================================================
        // Seq.groupBy regroupe les √©l√©ments ayant la m√™me cl√©
        // Ici on groupe par dateKey pour rassembler toutes les c√©l√©brations du m√™me jour
        // Exemple : toutes les c√©l√©brations du "0205" ensemble
        // Performance : O(n log n) √† cause du tri interne
        |> Seq.groupBy fst // fst extrait le premier √©l√©ment du tuple (dateKey)

        // ================================================================
        // √âTAPE 4 : TRANSFORMATION DES GROUPES ET TRI PAR PRIORIT√â
        // ================================================================
        // √Ä ce stade nous avons : seq<DateKey * seq<DateKey * IndexedCelebration>>
        // Nous devons nettoyer et trier par priorit√© liturgique
        |> Seq.map (fun (dateKey, groupedCelebrations) ->

            // Extraction et tri des c√©l√©brations de chaque groupe
            // snd extrait le deuxi√®me √©l√©ment du tuple (IndexedCelebration)
            // Le tri se fait par priorit√© liturgique (plus bas = plus prioritaire)
            let celebrationsForThisDate =
                groupedCelebrations // seq<DateKey * IndexedCelebration>
                |> Seq.map snd // seq<IndexedCelebration>
                |> List.ofSeq // IndexedCelebration list

            // Retour du tuple final propre
            (dateKey, celebrationsForThisDate))

        // ================================================================
        // √âTAPE 5 : CONVERSION EN MAP POUR ACC√àS O(1)
        // ================================================================
        // Map.ofSeq convertit une s√©quence de tuples en Map
        // Les Maps en F# utilisent des arbres balanc√©s ‚Üí recherche O(log n)
        // En pratique, pour des petits volumes c'est quasi-O(1)
        |> Map.ofSeq

    // ================================================================
    // FONCTIONS UTILITAIRES
    // ================================================================

    /// Cr√©e une cl√© de date standardis√©e √† partir d'un mois et d'un jour.
    /// Cette fonction √©vite la duplication du format dans le code.
    ///
    /// üìù PARAM√àTRES :
    /// - month : int - Le mois (1-12)
    /// - day : int - Le jour (1-31)
    ///
    /// üìù RETOUR :
    /// - DateKey - Cha√Æne au format "MMDD"
    ///
    /// üí° EXEMPLES :
    /// formatDateKey 2 5   ‚Üí "0205" (5 f√©vrier)
    /// formatDateKey 12 25 ‚Üí "1225" (25 d√©cembre)
    let formatDateKey (month: int) (day: int) : DateKey = sprintf "%02d%02d" month day

    /// Recherche toutes les c√©l√©brations pour une date donn√©e dans l'index.
    /// Encapsule la logique de recherche avec gestion des cas d'absence.
    /// Les r√©sultats sont automatiquement tri√©s par priorit√© liturgique.
    ///
    /// üìù PARAM√àTRES :
    /// - month : int - Le mois recherch√© (1-12)
    /// - day : int - Le jour recherch√© (1-31)
    /// - index : Map<DateKey, IndexedCelebration list> - L'index pr√©-calcul√©
    ///
    /// üìù RETOUR :
    /// - IndexedCelebration list - Liste tri√©e par priorit√© (vide si aucune)
    ///
    /// ‚ö° PERFORMANCE : O(1) - Recherche directe dans le Map
    let findCelebrationsForDate
        (month: int)
        (day: int)
        (index: Map<DateKey, IndexedCelebration list>)
        : IndexedCelebration list =
        let dateKey = formatDateKey month day
        index.TryFind(dateKey) |> Option.defaultValue []

    /// Version alternative avec pattern matching explicite pour l'apprentissage.
    /// M√™me fonctionnalit√© que findCelebrationsForDate mais style plus explicite.
    let findCelebrationsForDateExplicit
        (month: int)
        (day: int)
        (index: Map<DateKey, IndexedCelebration list>)
        : IndexedCelebration list =
        let dateKey = formatDateKey month day

        match index.TryFind(dateKey) with
        | Some celebrationsList -> celebrationsList
        | None -> []

    /// Recherche la c√©l√©bration principale (plus haute priorit√©) pour une date donn√©e.
    /// Utile pour d√©terminer la c√©l√©bration liturgique du jour.
    ///
    /// üìù RETOUR :
    /// - IndexedCelebration option - La c√©l√©bration principale ou None
    let findMainCelebrationForDate
        (month: int)
        (day: int)
        (index: Map<DateKey, IndexedCelebration list>)
        : IndexedCelebration option =
        findCelebrationsForDate month day index |> List.tryHead // La premi√®re apr√®s tri par priorit√©

    /// Filtre les c√©l√©brations par couleur liturgique pour une date donn√©e.
    ///
    /// üìù EXEMPLE :
    /// let redCelebrations = findCelebrationsByColor 2 14 Rubeus index
    let findCelebrationsByColor
        (month: int)
        (day: int)
        (color: LiturgicalColor)
        (index: Map<DateKey, IndexedCelebration list>)
        : IndexedCelebration list =
        findCelebrationsForDate month day index
        |> List.filter (fun (_, celebration) -> celebration.Color = color)

    /// Filtre les c√©l√©brations par rang liturgique pour une date donn√©e.
    ///
    /// üìù EXEMPLE :
    /// let solemnities = findCelebrationsByRank 12 25 Sollemnitas index
    let findCelebrationsByRank
        (month: int)
        (day: int)
        (rank: LiturgicalRank)
        (index: Map<DateKey, IndexedCelebration list>)
        : IndexedCelebration list =
        findCelebrationsForDate month day index
        |> List.filter (fun (_, celebration) -> celebration.Rank = rank)

    /// Calcule des statistiques sur l'index pour debugging et monitoring.
    /// Utile pour comprendre la r√©partition des c√©l√©brations et valider l'index.
    ///
    /// üìù PARAM√àTRE :
    /// - index : Map<DateKey, IndexedCelebration list> - L'index √† analyser
    ///
    /// üìù RETOUR :
    /// - Tuple avec statistiques d√©taill√©es
    let getIndexStats (index: Map<DateKey, IndexedCelebration list>) =
        let totalDates = index.Count

        let totalCelebrations =
            index |> Map.fold (fun acc _ celebrations -> acc + celebrations.Length) 0

        let datesWithMultipleCelebrations =
            index |> Map.filter (fun _ celebrations -> celebrations.Length > 1) |> Map.count

        // Statistiques par rang liturgique
        let celebrationsByRank =
            index
            |> Map.toSeq
            |> Seq.collect (snd >> List.map snd)
            |> Seq.groupBy (fun c -> c.Rank)
            |> Seq.map (fun (rank, celebrations) -> (rank, Seq.length celebrations))
            |> Map.ofSeq

        // Statistiques par couleur liturgique
        let celebrationsByColor =
            index
            |> Map.toSeq
            |> Seq.collect (snd >> List.map snd)
            |> Seq.groupBy (fun c -> c.Color)
            |> Seq.map (fun (color, celebrations) -> (color, Seq.length celebrations))
            |> Map.ofSeq

        (totalDates, totalCelebrations, datesWithMultipleCelebrations, celebrationsByRank, celebrationsByColor)

    // ================================================================
    // FONCTIONS DE DEBUGGING ET VALIDATION
    // ================================================================

    /// Convertit une couleur liturgique en √©moji pour l'affichage
    let colorToEmoji =
        function
        | Albus -> "‚ö™"
        | Rubeus -> "üî¥"
        | Viridis -> "üü¢"
        | Violaceus -> "üü£"
        | Roseus -> "üå∏"
        | Niger -> "‚ö´"

    /// Convertit un rang liturgique en √©moji pour l'affichage
    let rankToEmoji =
        function
        | Sollemnitas -> "üëë"
        | Dominica -> "‚úùÔ∏è"
        | Festum -> "üéâ"
        | Memoria -> "üìø"
        | MemoriaAdLibitum -> "üí´"
        | FeriaOrdinis -> "üìÖ"

    /// Affiche le contenu complet de l'index pour debugging.
    /// Utilise les types liturgiques pour un affichage riche.
    let printIndex (index: Map<DateKey, IndexedCelebration list>) =
        printfn "=== INDEX LITURGIQUE ==="
        printfn "Format : DateKey -> [C√©l√©brations par priorit√©]"
        printfn ""

        index
        |> Map.iter (fun dateKey celebrations ->
            let month = int (dateKey.Substring(0, 2))
            let day = int (dateKey.Substring(2, 2))
            printfn "üìÖ %02d/%02d :" month day

            celebrations
            |> List.iteri (fun i (id, celebration) ->
                let colorEmoji = colorToEmoji celebration.Color
                let rankEmoji = rankToEmoji celebration.Rank

                printfn "  %d. %s %s %s %s" (i + 1) colorEmoji rankEmoji id celebration.Name)

            printfn "")

        let (totalDates, totalCelebrations, datesWithMultiple, byRank, byColor) =
            getIndexStats index

        printfn "üìä STATISTIQUES LITURGIQUES :"
        printfn "  - Dates index√©es : %d" totalDates
        printfn "  - C√©l√©brations totales : %d" totalCelebrations
        printfn "  - Dates avec plusieurs c√©l√©brations : %d" datesWithMultiple

        printfn "\nüìã R√âPARTITION PAR RANG :"

        byRank
        |> Map.iter (fun rank count -> printfn "  %s %A : %d" (rankToEmoji rank) rank count)

        printfn "\nüé® R√âPARTITION PAR COULEUR :"

        byColor
        |> Map.iter (fun color count -> printfn "  %s %A : %d" (colorToEmoji color) color count)

    /// Valide la coh√©rence de l'index par rapport au calendrier source.
    /// V√©rifie que l'index contient exactement toutes les c√©l√©brations du calendrier.
    let validateIndex
        (calendar: Map<CelebrationId, LiturgicalCelebration>)
        (index: Map<DateKey, IndexedCelebration list>)
        =
        let celebrationsInCalendar = calendar.Count

        let celebrationsInIndex =
            index |> Map.fold (fun acc _ celebrations -> acc + celebrations.Length) 0

        // Validation quantitative
        let quantityValid = celebrationsInCalendar = celebrationsInIndex

        // Validation qualitative : v√©rifier que tous les IDs sont pr√©sents
        let calendarIds = calendar |> Map.keys |> Set.ofSeq
        let indexIds = index |> Map.toSeq |> Seq.collect (snd >> List.map fst) |> Set.ofSeq

        let qualityValid = calendarIds = indexIds

        let isValid = quantityValid && qualityValid

        if isValid then
            printfn "‚úÖ Index valide : %d c√©l√©brations liturgiques index√©es correctement" celebrationsInIndex
        else
            printfn "‚ùå Index invalide :"

            if not quantityValid then
                printfn
                    "   - Quantit√© : %d dans le calendrier, %d dans l'index"
                    celebrationsInCalendar
                    celebrationsInIndex

            if not qualityValid then
                let missing = Set.difference calendarIds indexIds
                let extra = Set.difference indexIds calendarIds

                if not (Set.isEmpty missing) then
                    printfn "   - IDs manquants : %A" missing

                if not (Set.isEmpty extra) then
                    printfn "   - IDs en trop : %A" extra

        isValid
